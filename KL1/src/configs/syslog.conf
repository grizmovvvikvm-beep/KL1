#!/bin/bash

setup_advanced_syslog() {
    log_info "Setting up advanced Syslog configuration..."
    
    # Создаем конфигурацию rsyslog
    cat > "/etc/rsyslog.d/99-kurs-light.conf" <<'SYSLOG'
# KursLight VPN Management System - Comprehensive Logging Configuration

# Modules
module(load="imuxsock")    # provides support for local system logging
module(load="imklog")      # provides kernel logging support
module(load="omrelp")      # RELP output module
module(load="mmjsonparse") # JSON parsing

# Templates
template(name="KursLightFormat" type="string" string="%TIMESTAMP% %HOSTNAME% %syslogtag%%msg%\\n")
template(name="KursLightJSON" type="list") {
    constant(value="{")
    constant(value="\"timestamp\":\"")     property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"hostname\":\"")   property(name="hostname")
    constant(value="\",\"app\":\"")        property(name="programname")
    constant(value="\",\"pid\":\"")        property(name="procid")
    constant(value="\",\"message\":\"")    property(name="msg" format="json")
    constant(value="\",\"severity\":\"")   property(name="syslogseverity-text")
    constant(value="\"}")
}

# Application Logs
if $programname == 'kurs-light' then {
    action(type="omfile" file="/opt/kurs-light/logs/applications/kurslight.log" template="KursLightFormat")
    action(type="omfile" file="/opt/kurs-light/logs/applications/kurslight-json.log" template="KursLightJSON")
    stop
}

# OpenVPN Logs
if $programname == 'openvpn' then {
    action(type="omfile" file="/opt/kurs-light/logs/vpn/openvpn.log" template="KursLightFormat")
    stop
}

# VPN Connection Logs
if $syslogtag contains 'vpn-connection' then {
    action(type="omfile" file="/opt/kurs-light/logs/vpn/connections.log")
    stop
}

# Security Logs
if $syslogtag contains 'auth' or $syslogtag contains 'security' then {
    action(type="omfile" file="/opt/kurs-light/logs/security/auth.log")
    stop
}

# Database Logs
if $syslogtag contains 'database' or $programname == 'postgres' then {
    action(type="omfile" file="/opt/kurs-light/logs/database/db.log")
    stop
}

# System Logs
if $syslogtag contains 'system' or $programname == 'systemd' then {
    action(type="omfile" file="/opt/kurs-light/logs/system/system.log")
    stop
}

# Error Logs - High priority messages
if $syslogseverity <= 3 then {  # errors and worse
    action(type="omfile" file="/opt/kurs-light/logs/errors/critical.log")
}

# Audit Logs
if $syslogtag contains 'audit' then {
    action(type="omfile" file="/opt/kurs-light/logs/audit/audit.log")
    stop
}

# Performance Logs
if $syslogtag contains 'performance' or $syslogtag contains 'metrics' then {
    action(type="omfile" file="/opt/kurs-light/logs/performance/metrics.log")
    stop
}

# Remote Logging (if configured)
if $programname == 'kurs-light' and $syslogseverity <= 4 then {
    action(type="omrelp" target="logserver.example.com" port="2514" template="KursLightJSON")
}
SYSLOG

    create_log_directories
    configure_logrotate
    restart_syslog_services
    
    log_success "Advanced Syslog configuration completed"
}

create_log_directories() {
    log_info "Creating log directory structure..."
    
    local log_dirs=(
        "$LOG_DIR/applications"
        "$LOG_DIR/vpn"
        "$LOG_DIR/security"
        "$LOG_DIR/database"
        "$LOG_DIR/system"
        "$LOG_DIR/errors"
        "$LOG_DIR/audit"
        "$LOG_DIR/performance"
        "$LOG_DIR/archive"
    )
    
    for dir in "${log_dirs[@]}"; do
        mkdir -p "$dir"
        chmod 755 "$dir"
    done
    
    # Create log files
    touch "$LOG_DIR/applications/kurslight.log"
    touch "$LOG_DIR/applications/kurslight-json.log"
    touch "$LOG_DIR/vpn/openvpn.log"
    touch "$LOG_DIR/vpn/connections.log"
    touch "$LOG_DIR/security/auth.log"
    touch "$LOG_DIR/database/db.log"
    touch "$LOG_DIR/system/system.log"
    touch "$LOG_DIR/errors/critical.log"
    touch "$LOG_DIR/audit/audit.log"
    touch "$LOG_DIR/performance/metrics.log"
    
    # Set permissions
    chmod 644 "$LOG_DIR"/applications/*.log
    chmod 644 "$LOG_DIR"/vpn/*.log
    chmod 600 "$LOG_DIR"/security/*.log
    chmod 640 "$LOG_DIR"/database/*.log
}

configure_logrotate() {
    log_info "Configuring logrotate..."
    
    cat > "/etc/logrotate.d/kurs-light" <<'LOGROTATE'
/opt/kurs-light/logs/applications/*.log
/opt/kurs-light/logs/vpn/*.log
/opt/kurs-light/logs/security/*.log
/opt/kurs-light/logs/database/*.log
/opt/kurs-light/logs/system/*.log
/opt/kurs-light/logs/errors/*.log
/opt/kurs-light/logs/audit/*.log
/opt/kurs-light/logs/performance/*.log {
    daily
    missingok
    rotate 30
    compress
    delaycompress
    notifempty
    copytruncate
    dateext
    dateformat -%Y%m%d
    postrotate
        /usr/bin/systemctl kill -s HUP rsyslog.service >/dev/null 2>&1 || true
    endscript
}

/opt/kurs-light/logs/archive/*.log {
    monthly
    missingok
    rotate 12
    compress
    delaycompress
    notifempty
}
LOGROTATE
}

restart_syslog_services() {
    log_info "Restarting logging services..."
    
    systemctl restart rsyslog
    systemctl enable rsyslog
    
    # Test logging
    logger -t "kurs-light" "Syslog configuration test - Installation completed successfully"
    
    log_success "Logging services configured and restarted"
}